import os
import csv
import shutil
import numpy as np
import librosa

# Configuración
TRANSCRIPT_PATH = r"/Users/italyzayas/Documents/computo paralelo/Proyecto/transcript.txt"
AUDIO_BASE_PATH = r"/Users/italyzayas/Documents/computo paralelo/Proyecto/Dataset"
RAW_AUDIO_DIR = r"data/raw"
FEATURES_DIR = r"data/processed"
LABELS_CSV = r"data/labels.csv"
SAMPLE_RATE = 16000
N_MFCC = 13
FRAME_LENGTH = 0.025
FRAME_STEP = 0.010

# Preparar labels desde el transcript
def prepare_labels_from_transcript():
    rows = []
    with open(TRANSCRIPT_PATH, "r", encoding="utf-8") as f:
        for line in f:
            parts = line.strip().split("|")
            if len(parts) < 1: continue
            filepath = parts[0]
            label = filepath.split("/")[0]
            filename = os.path.basename(filepath)
            src = os.path.join(AUDIO_BASE_PATH, filepath)
            dst = os.path.join(RAW_AUDIO_DIR, filename)
            os.makedirs(RAW_AUDIO_DIR, exist_ok=True)
            if os.path.exists(src):
                shutil.copy2(src, dst)
                rows.append((filename, label))
    os.makedirs("data", exist_ok=True)
    with open(LABELS_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["filename", "label"])
        writer.writerows(rows)

# Extraer características MFCC
def extract_mfcc():
    os.makedirs(FEATURES_DIR, exist_ok=True)
    with open(LABELS_CSV, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        next(reader)
        for fname, _ in reader:
            path = os.path.join(RAW_AUDIO_DIR, fname)
            if os.path.exists(path):
                signal, sr = librosa.load(path, sr=SAMPLE_RATE)
                mfcc = librosa.feature.mfcc(y=signal, sr=sr, n_mfcc=N_MFCC,
                                            hop_length=int(FRAME_STEP * sr),
                                            n_fft=int(FRAME_LENGTH * sr))
                mfcc = mfcc.T
                mfcc = (mfcc - np.mean(mfcc, axis=0)) / np.std(mfcc, axis=0)
                np.save(os.path.join(FEATURES_DIR, fname.replace(".wav", ".npy")), mfcc)
